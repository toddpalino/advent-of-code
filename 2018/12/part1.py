#!/usr/bin/env python3

# Puzzle input
pots = "#......##...#.#.###.#.##..##.#.....##....#.#.##.##.#..#.##........####.###.###.##..#....#...###.##"
rules = {
	"#####": ".",
	"####.": "#",
	"###.#": ".",
	"###..": "#",
	"##.##": "#",
	"##.#.": ".",
	"##..#": ".",
	"##...": "#",
	"#.###": "#",
	"#.##.": ".",
	"#.#.#": "#",
	"#.#..": ".",
	"#..##": "#",
	"#..#.": ".",
	"#...#": ".",
	"#....": ".",
	".####": ".",
	".###.": "#",
	".##.#": "#",
	".##..": "#",
	".#.##": ".",
	".#.#.": "#",
	".#..#": "#",
	".#...": "#",
	"..###": ".",
	"..##.": "#",
	"..#.#": "#",
	"..#..": "#",
	"...##": ".",
	"...#.": "#",
	"....#": ".",
	".....": "."
}
total_generations = 20

# Test input
#pots = "#..#.#..##......###...###"
#rules = {
#	"#####": ".",
#	"####.": "#",
#	"###.#": "#",
#	"###..": "#",
#	"##.##": "#",
#	"##.#.": "#",
#	"##..#": ".",
#	"##...": ".",
#	"#.###": "#",
#	"#.##.": ".",
#	"#.#.#": "#",
#	"#.#..": ".",
#	"#..##": ".",
#	"#..#.": ".",
#	"#...#": ".",
#	"#....": ".",
#	".####": "#",
#	".###.": ".",
#	".##.#": ".",
#	".##..": "#",
#	".#.##": "#",
#	".#.#.": "#",
#	".#..#": ".",
#	".#...": "#",
#	"..###": ".",
#	"..##.": ".",
#	"..#.#": ".",
#	"..#..": "#",
#	"...##": "#",
#	"...#.": ".",
#	"....#": ".",
#	".....": "."
#}
#total_generations = 20

# Add enough padding
pots = list(('.' * total_generations * 2) + pots + ('.' * total_generations * 2))
values = [i - (2 * total_generations) for i in range(len(pots))]

# If we need to do an obnoxious number of generations, we'll probably want a cache to detect loops
for generation in range(total_generations):
	new_pots = list(pots)
	for i in range(2, len(pots) - 2):
		new_pots[i] = rules[''.join(pots[i-2:i+3])]
	pots = new_pots

total = sum(values[i] for i, c in enumerate(pots) if c == '#')
print("Total: {}".format(total))
